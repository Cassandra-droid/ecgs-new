datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  User
  Admin
}

model User {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  password             String
  emailVerified        DateTime?
  isEmailVerified      Boolean?  @default(false)
  image                String?
  role                 UserRole  @default(User)
  verificationCode     String?
  resetPasswordToken   String?   @unique
  resetPasswordExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  profile UserProfile?
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  age               Int?
  gender            String?
  educationLevel    String?
  experience        String?
  careerPreferences String?
  title             String?
  bio               String?
  location          String?
  phone             String?
  website           String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  
  skills            Skill[]     @relation("UserProfileSkills")
  interests         Interest[]  @relation("UserProfileInterests")
  education         Education[]
}

model Skill {
  id        String   @id @default(cuid())
  name      String   
  level     String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserProfile[] @relation("UserProfileSkills")
  
  @@unique([name, level])
}

model Interest {
  id        String   @id @default(cuid())
  name      String   
  category  String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserProfile[] @relation("UserProfileInterests")
  
  @@unique([name, category])
}


model Education {
  id          String      @id @default(cuid())
  institution String
  degree      String
  field       String?
  startYear   String?
  endYear     String?
  description String?
  
  // Relation to profile
  profileId   String
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([profileId])
}